import fs from "node:fs/promises"
import path from "node:path"
import pkg from "@prisma/generator-helper"

const { generatorHandler } = pkg
let header = `// This file was generated by a custom prisma generator, do not edit manually.\n`
header += 'import type { Prisma } from "@prisma/client"\n\n'

generatorHandler({
  onManifest() {
    return {
      defaultOutput: "../node_modules/.generated/types.ts",
      prettyName: "Prisma Additional Types Generator",
    }
  },

  async onGenerate(options) {
    const models = options.dmmf.datamodel.models

    const output = models.map((model) => {
      const relationFields = model.fields.filter((fieldDef) => "relationName" in fieldDef)

      if (relationFields.length === 0) return
      let exportString = `export type ${model.name}WithRelations = Prisma.${model.name}GetPayload<{\n`
      exportString += "  include: {\n"
      relationFields.forEach((relation) => {
        if (
          model.name == "Application" &&
          (relation.name == "developingOrganization" || relation.name == "operatingOrganization")
        ) {
          exportString += `    ${relation.name}: {\n`
          exportString += `      include: {\n`
          exportString += `        organizationalUnit: true\n`
          exportString += `      }\n`
          exportString += `    }\n`
        } else if (model.name == "Environment" && relation.name == "application") {
          exportString += `    ${relation.name}: {\n`
          exportString += `      include: {\n`
          exportString += `        developingOrganization: {\n`
          exportString += `          include: {\n`
          exportString += `            organizationalUnit: true\n`
          exportString += `          }\n`
          exportString += `        }\n`
          exportString += `        operatingOrganization: {\n`
          exportString += `          include: {\n`
          exportString += `            organizationalUnit: true\n`
          exportString += `          }\n`
          exportString += `        }\n`
          exportString += `        applicationMemberships: true\n`
          exportString += `      }\n`
          exportString += `    }\n`
        } else {
          exportString += `    ${relation.name}: true\n`
        }
      })
      exportString += "  }\n"
      exportString += `}>\n`
      return exportString
    })

    const outputFile = options.generator.output
    if (!outputFile?.value) {
      throw new Error("No output file specified")
    }

    const outputPath = path.resolve(outputFile.value)
    await fs.mkdir(path.dirname(outputPath), { recursive: true })
    await fs.writeFile(outputPath, header + output.join("\n"), "utf-8")
  },
})
